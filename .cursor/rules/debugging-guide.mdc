---
description: 
globs: 
alwaysApply: true
---
# デバッグ・トラブルシューティングガイド

## 🚨 緊急対応 - 最近解決された重要な問題

### Runtime Error: Cannot read properties of undefined (reading 'map')
**発生日**: 2024年12月27日  
**症状**: アプリケーション起動時にランタイムエラーが発生
**根本原因**: 
- `requirementsData.graduationRequirements`（複数形）でアクセスしていたが、実際のJSONは`graduationRequirement`（単数形）
- `checkGraduationRequirements`関数が配列を期待していたが、undefinedを受け取っていた

**解決手順**:
1. [page.tsx](mdc:app/page.tsx)の`requirementsData.graduationRequirements`を`requirementsData.graduationRequirement`に修正
2. [simpleRequirementChecker.ts](mdc:app/lib/simpleRequirementChecker.ts)の型定義を実際のJSONデータ構造に合わせて修正
3. 競合する`requirementChecker.ts`を一時無効化

**予防策**: 
- JSONデータ構造の変更時は必ず型定義も同時に更新
- TypeScriptビルドを定期的に実行して型エラーを早期発見

### TypeScript型エラー - department プロパティ
**症状**: ビルド時に`Property 'department' is missing`エラー
**根本原因**: [courses.json](mdc:app/lib/data/courses.json)に`department`プロパティが存在しないが、型定義では必須になっていた

**解決手順**:
1. [types.ts](mdc:app/lib/types.ts)の`Course`型で`department`をオプショナル（`department?: string`）に変更
2. [utils.ts](mdc:app/lib/utils.ts)の`calculateCreditsByDepartment`で適切なnullチェックを追加
3. 型アサーション（`as Course[]`）でJSONデータの型問題を解決

**予防策**:
- JSONデータの構造と型定義の整合性を定期的にチェック
- オプショナルプロパティは必ずnullチェックを実装

## よくある問題と解決方法

### 1. TypeScript型エラー

#### 問題：科目データの型エラー
```
Type 'string' is not assignable to type 'CourseCategory'
```
**解決方法：**
1. [types.ts](mdc:app/lib/types.ts)で`CourseCategory`型を確認
2. [courses.json](mdc:app/lib/data/courses.json)のデータが型定義と一致しているか確認
3. 必要に応じて型定義を拡張または修正

#### 問題：コンポーネントのpropsエラー
```
Property 'onSearch' is missing in type
```
**解決方法：**
```typescript
// プロップスインターフェースを確認
interface Props {
  onSearch: (filter: SearchFilter) => void; // 必須プロップ
  onReset?: () => void; // オプショナルプロップ
}
```

### 2. コンポーネントが表示されない

#### チェックリスト：
1. `'use client'`ディレクティブが設定されているか
2. コンポーネントが適切にエクスポートされているか
3. インポートパスが正しいか
4. 条件付きレンダリングの条件を確認

```typescript
// 悪い例
export function CourseSearch() { ... }

// 良い例
export default function CourseSearch() { ... }
```

### 3. ローカルストレージ関連の問題

#### 問題：データが保存されない
**デバッグ手順：**
1. ブラウザの開発者ツール → Application → Local Storage を確認
2. [storage.ts](mdc:app/lib/storage.ts)の`saveUserData`関数が呼ばれているか確認
3. エラーコンソールを確認

```typescript
// デバッグ用のログを追加
console.log('Saving data:', userData);
localStorage.setItem(STORAGE_KEY, JSON.stringify(userData));
console.log('Data saved successfully');
```

#### 問題：データの読み込みエラー
```typescript
// エラーハンドリングを追加
try {
  const data = JSON.parse(localStorage.getItem(STORAGE_KEY) || '{}');
  return data;
} catch (error) {
  console.error('Failed to parse stored data:', error);
  return createDefaultUserData();
}
```

### 4. API関連の問題

#### 問題：シラバススクレイピングAPIが動作しない
**チェックポイント：**
1. [route.ts](mdc:app/api/scrape/route.ts)のエンドポイントが正しく実装されているか
2. CORSエラーが発生していないか
3. ネットワークタブでリクエストの詳細を確認

```typescript
// デバッグ用のレスポンス確認
const response = await fetch('/api/scrape');
console.log('Response status:', response.status);
console.log('Response headers:', response.headers);
const data = await response.json();
console.log('Response data:', data);
```

### 5. 状態管理の問題

#### 問題：状態が更新されない
```typescript
// 悪い例：直接的な状態変更
userCourses.push(newCourse); // ❌
setUserCourses(userCourses);

// 良い例：新しい配列を作成
setUserCourses(prev => [...prev, newCourse]); // ✅
```

#### 問題：無限レンダリング
```typescript
// 悪い例：依存配列なし
useEffect(() => {
  fetchData();
}); // ❌ 無限ループ

// 良い例：適切な依存配列
useEffect(() => {
  fetchData();
}, [dependency]); // ✅
```

## デバッグツールと手法

### 1. React Developer Tools
- コンポーネントツリーでpropsと状態を確認
- プロファイラーでパフォーマンスを分析

### 2. ブラウザ開発者ツール
- **Console**: エラーログとデバッグログ
- **Network**: API呼び出しの詳細
- **Application**: ローカルストレージの内容
- **Elements**: DOM構造とCSS

### 3. TypeScript Language Server
- VSCodeでの型エラーのリアルタイム表示
- 型定義へのジャンプ（Ctrl+Click）

### 4. デバッグ用のユーティリティ関数

```typescript
// 開発環境でのみログを出力
export const debugLog = (message: string, data?: any) => {
  if (process.env.NODE_ENV === 'development') {
    console.log(`[DEBUG] ${message}`, data);
  }
};

// オブジェクトの詳細な内容を表示
export const deepLog = (obj: any) => {
  console.log(JSON.stringify(obj, null, 2));
};
```

## パフォーマンス問題のデバッグ

### 1. レンダリング問題
```typescript
// React.memo で不要な再レンダリングを防ぐ
const CourseItem = React.memo(({ course, onUpdate }) => {
  console.log('CourseItem rendered:', course.id);
  return <div>...</div>;
});

// useMemo で計算の最適化
const filteredCourses = useMemo(() => {
  console.log('Filtering courses...');
  return filterCourses(courses, filter);
}, [courses, filter]);
```

### 2. メモリリーク
```typescript
// useEffect でのクリーンアップ
useEffect(() => {
  const timer = setInterval(() => {
    // 処理
  }, 1000);

  return () => {
    clearInterval(timer); // クリーンアップ
  };
}, []);
```

## エラー境界（Error Boundary）の実装

```typescript
// components/ErrorBoundary.tsx
'use client';

import React, { Component, ReactNode } from 'react';

interface Props {
  children: ReactNode;
}

interface State {
  hasError: boolean;
  error?: Error;
}

class ErrorBoundary extends Component<Props, State> {
  constructor(props: Props) {
    super(props);
    this.state = { hasError: false };
  }

  static getDerivedStateFromError(error: Error): State {
    return { hasError: true, error };
  }

  componentDidCatch(error: Error, errorInfo: any) {
    console.error('Error caught by boundary:', error, errorInfo);
  }

  render() {
    if (this.state.hasError) {
      return (
        <div className="p-4 bg-red-50 border border-red-200 rounded">
          <h2 className="text-red-800 font-bold">エラーが発生しました</h2>
          <p className="text-red-600">
            申し訳ございませんが、予期しないエラーが発生しました。
            ページを再読み込みしてお試しください。
          </p>
          {process.env.NODE_ENV === 'development' && (
            <details className="mt-2">
              <summary>エラー詳細（開発用）</summary>
              <pre className="text-xs text-red-700 mt-1">
                {this.state.error?.stack}
              </pre>
            </details>
          )}
        </div>
      );
    }

    return this.props.children;
  }
}

export default ErrorBoundary;
```

## 本番環境での問題調査

### 1. ログ収集
```typescript
// エラー報告の実装
window.addEventListener('error', (event) => {
  const errorInfo = {
    message: event.message,
    filename: event.filename,
    lineno: event.lineno,
    colno: event.colno,
    error: event.error?.stack,
    userAgent: navigator.userAgent,
    timestamp: new Date().toISOString(),
  };
  
  // エラー報告サービスに送信
  // reportError(errorInfo);
  console.error('Global error:', errorInfo);
});
```

### 2. パフォーマンス監視
```typescript
// ページロード時間の測定
window.addEventListener('load', () => {
  const loadTime = performance.now();
  console.log(`Page loaded in ${loadTime}ms`);
});
```

## 緊急時の対応手順

### 1. アプリケーションが起動しない
1. `npm run dev` でエラーメッセージを確認
2. `package.json` の依存関係を確認
3. `node_modules` を削除して `npm install` を実行
4. TypeScript設定ファイル（tsconfig.json）を確認

### 2. データが失われた
1. ブラウザのローカルストレージを確認
2. バックアップデータがあるか確認
3. [storage.ts](mdc:app/lib/storage.ts)の`importUserData`関数でデータ復元

### 3. 重大なバグの発見
1. 該当機能を一時的に無効化
2. エラー境界でフォールバック表示
3. 緊急修正ブランチを作成
4. 修正後、即座にデプロイ

## デバッグ時の心構え

1. **仮定せずに確認する**: 「動いているはず」ではなく実際に確認
2. **小さな変更から**: 一度に大きな変更をせず、小さな変更で問題を特定
3. **ログを活用**: console.logは恥ずかしいことではない
4. **他人の目**: コードレビューで問題を発見
5. **休憩を取る**: 行き詰まったら一度離れて頭をリフレッシュ

## 🆕 系別機能実装時のトラブルシューティング（2024年12月27日追加）

### 1. 型定義関連の問題

#### 問題：SearchFilter型にsystemフィールドを追加し忘れ
```
Property 'system' does not exist on type 'SearchFilter'
```
**解決方法：**
1. [types.ts](mdc:app/lib/types.ts)の`SearchFilter`インターフェースに`system?: string`を追加
2. TypeScriptビルドエラーを確認して修正

#### 問題：プロップスの型エラー
```
Property 'courses' is missing in type
```
**解決方法：**
```typescript
// CourseSearchコンポーネントのプロップス型を更新
interface CourseSearchProps {
  courses: Course[];  // 追加
  onSearch: (filter: SearchFilter) => void;
  onReset: () => void;
}
```

### 2. フィルタ機能の問題

#### 問題：系フィルタが効かない
**症状**: 系を選択しても科目が絞り込まれない
**原因**: `filterCourses()`関数に系フィルタのロジックが未実装
**解決方法：**
```typescript
// utils.ts のfilterCourses関数に追加
if (filter.system) {
  const systemName = extractSystemFromCategory(course.category);
  if (systemName !== filter.system) {
    return false;
  }
}
```

#### 問題：系名の抽出が正しく動作しない
**症状**: 「情報・メディア系(Information and Media)」から「情報・メディア系」が抽出されない
**原因**: 正規表現のパターンが不適切
**解決方法：**
```typescript
export function extractSystemFromCategory(category: string): string {
  const match = category.match(/^([^(]+)/);
  return match ? match[1].trim() : category;
}
```

### 3. パフォーマンス関連の問題

#### 問題：系別集計の計算が重い
**症状**: 科目数が多いときに画面の反応が遅い
**解決方法：**
```typescript
// useMemoを使用して計算をメモ化
const systemCredits = useMemo(() => 
  calculateCreditsBySystem(courses, userCourses), 
  [courses, userCourses]
);
```

#### 問題：不要な再レンダリングが発生
**症状**: 展開/折りたたみ操作で全体が再描画される
**解決方法：**
```typescript
// 展開状態をローカル状態で管理
const [expandedSystems, setExpandedSystems] = useState<Record<string, boolean>>({});

const toggleSystemExpansion = useCallback((systemName: string) => {
  setExpandedSystems(prev => ({
    ...prev,
    [systemName]: !prev[systemName]
  }));
}, []);
```

### 4. UI表示の問題

#### 問題：レスポンシブデザインが崩れる
**症状**: モバイルで系別表示が見切れる
**解決方法：**
```typescript
// グリッドレイアウトをレスポンシブに
<div className="grid grid-cols-1 md:grid-cols-2 gap-4">
```

#### 問題：展開/折りたたみアイコンが表示されない
**症状**: ChevronDownアイコンがインポートされていない
**解決方法：**
```typescript
import { ChevronDown, ChevronUp } from 'lucide-react';
```

### 5. データ整合性の問題

#### 問題：系別集計で科目が重複カウントされる
**症状**: 同じ科目が複数の系にカウントされる
**原因**: 科目のカテゴリ分類が曖昧
**解決方法：**
```typescript
// 科目は必ず1つの系にのみ属するようにデータを確認
// extractSystemFromCategory()の結果を検証
```

#### 問題：空の系が表示される
**症状**: 履修科目がない系も表示される
**解決方法：**
```typescript
// 履修科目がある系のみを表示
{Object.entries(systemCredits)
  .filter(([_, data]) => data.completed > 0 || data.planned > 0)
  .map(([systemName, data]) => (
    // 表示処理
  ))
}
```

### 6. デバッグ手法

#### 系別集計のデバッグ
```typescript
// デバッグ用のログ出力
console.log('Available systems:', availableSystems);
console.log('System credits:', systemCredits);
console.log('Filter:', filter);

// 系名抽出のテスト
courses.forEach(course => {
  const system = extractSystemFromCategory(course.category);
  console.log(`${course.category} → ${system}`);
});
```

#### フィルタ動作のデバッグ
```typescript
// フィルタ結果の確認
const filtered = filterCourses(courses, filter);
console.log(`Filtered ${filtered.length} courses from ${courses.length}`);
console.log('Filter applied:', filter);
```

### 7. よくある実装ミス

#### ミス1: プロップスの渡し忘れ
```typescript
// 悪い例
<CourseSearch onSearch={handleSearch} onReset={handleResetSearch} />

// 良い例
<CourseSearch 
  courses={courses}  // 追加
  onSearch={handleSearch} 
  onReset={handleResetSearch} 
/>
```

#### ミス2: 依存配列の設定ミス
```typescript
// 悪い例：coursesが変更されても再計算されない
const availableSystems = useMemo(() => {
  // 処理
}, []); // ❌

// 良い例
const availableSystems = useMemo(() => {
  // 処理
}, [courses]); // ✅
```

#### ミス3: 型アサーションの乱用
```typescript
// 悪い例
const systems = courses.map(c => c.category as string);

// 良い例
const systems = courses.map(c => extractSystemFromCategory(c.category));
```

### 8. 系別機能の動作確認チェックリスト

- [ ] 系別フィルタで科目が正しく絞り込まれる
- [ ] 系別表示で単位数が正確に集計される
- [ ] 展開/折りたたみが正常に動作する
- [ ] レスポンシブデザインが適切に表示される
- [ ] TypeScriptビルドエラーがない
- [ ] 既存機能に影響がない
- [ ] パフォーマンスが適切（useMemoが効いている）
- [ ] 日本語ソートが正しく動作する

この系別機能のトラブルシューティング情報を参考に、類似の機能実装時の問題解決を効率化してください。
